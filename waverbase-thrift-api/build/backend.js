require("source-map-support").install();
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _thrift = __webpack_require__(1);
	
	var _thrift2 = _interopRequireDefault(_thrift);
	
	var _Waverbase = __webpack_require__(2);
	
	var _Waverbase2 = _interopRequireDefault(_Waverbase);
	
	var _waverbase_types = __webpack_require__(3);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var winston = __webpack_require__(4);
	
	var PORT = 9099;
	
	var waverbaseHandler = {
	  authenticate: function authenticate(username, password) {
	    winston.info('Authenicate attempt', username, password);
	    var user = new _waverbase_types.User({ username: username });
	    console.log(user);
	    result(null, user);
	  }
	};
	
	var waverbaseServiceOptions = {
	  transport: _thrift2.default.TBufferedTransport,
	  protocol: _thrift2.default.TJSONProtocol,
	  processor: _Waverbase2.default,
	  handler: waverbaseHandler
	};
	
	var serverOptions = {
	  // Include CORS header to accept any origin.
	  cors: { '*': true },
	  services: {
	    "/waverbase": waverbaseServiceOptions
	  }
	};
	
	var server = _thrift2.default.createWebServer(serverOptions);
	server.listen(PORT);
	winston.info('Thrift server running on port', PORT);

/***/ },
/* 1 */
/***/ function(module, exports) {

	module.exports = require("thrift");

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	//
	// Autogenerated by Thrift Compiler (0.9.1)
	//
	// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
	//
	var Thrift = __webpack_require__(1).Thrift;
	
	var ttypes = __webpack_require__(3);
	//HELPER FUNCTIONS AND STRUCTURES
	
	Waverbase_signUp_args = function(args) {
	  this.username = null;
	  this.password = null;
	  if (args) {
	    if (args.username !== undefined) {
	      this.username = args.username;
	    }
	    if (args.password !== undefined) {
	      this.password = args.password;
	    }
	  }
	};
	Waverbase_signUp_args.prototype = {};
	Waverbase_signUp_args.prototype.read = function(input) {
	  input.readStructBegin();
	  while (true)
	  {
	    var ret = input.readFieldBegin();
	    var fname = ret.fname;
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid)
	    {
	      case 1:
	      if (ftype == Thrift.Type.STRING) {
	        this.username = input.readString();
	      } else {
	        input.skip(ftype);
	      }
	      break;
	      case 2:
	      if (ftype == Thrift.Type.STRING) {
	        this.password = input.readString();
	      } else {
	        input.skip(ftype);
	      }
	      break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};
	
	Waverbase_signUp_args.prototype.write = function(output) {
	  output.writeStructBegin('Waverbase_signUp_args');
	  if (this.username !== null && this.username !== undefined) {
	    output.writeFieldBegin('username', Thrift.Type.STRING, 1);
	    output.writeString(this.username);
	    output.writeFieldEnd();
	  }
	  if (this.password !== null && this.password !== undefined) {
	    output.writeFieldBegin('password', Thrift.Type.STRING, 2);
	    output.writeString(this.password);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};
	
	Waverbase_signUp_result = function(args) {
	  this.success = null;
	  if (args) {
	    if (args.success !== undefined) {
	      this.success = args.success;
	    }
	  }
	};
	Waverbase_signUp_result.prototype = {};
	Waverbase_signUp_result.prototype.read = function(input) {
	  input.readStructBegin();
	  while (true)
	  {
	    var ret = input.readFieldBegin();
	    var fname = ret.fname;
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid)
	    {
	      case 0:
	      if (ftype == Thrift.Type.STRUCT) {
	        this.success = new ttypes.User();
	        this.success.read(input);
	      } else {
	        input.skip(ftype);
	      }
	      break;
	      case 0:
	        input.skip(ftype);
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};
	
	Waverbase_signUp_result.prototype.write = function(output) {
	  output.writeStructBegin('Waverbase_signUp_result');
	  if (this.success !== null && this.success !== undefined) {
	    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
	    this.success.write(output);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};
	
	Waverbase_authenticate_args = function(args) {
	  this.username = null;
	  this.password = null;
	  if (args) {
	    if (args.username !== undefined) {
	      this.username = args.username;
	    }
	    if (args.password !== undefined) {
	      this.password = args.password;
	    }
	  }
	};
	Waverbase_authenticate_args.prototype = {};
	Waverbase_authenticate_args.prototype.read = function(input) {
	  input.readStructBegin();
	  while (true)
	  {
	    var ret = input.readFieldBegin();
	    var fname = ret.fname;
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid)
	    {
	      case 1:
	      if (ftype == Thrift.Type.STRING) {
	        this.username = input.readString();
	      } else {
	        input.skip(ftype);
	      }
	      break;
	      case 2:
	      if (ftype == Thrift.Type.STRING) {
	        this.password = input.readString();
	      } else {
	        input.skip(ftype);
	      }
	      break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};
	
	Waverbase_authenticate_args.prototype.write = function(output) {
	  output.writeStructBegin('Waverbase_authenticate_args');
	  if (this.username !== null && this.username !== undefined) {
	    output.writeFieldBegin('username', Thrift.Type.STRING, 1);
	    output.writeString(this.username);
	    output.writeFieldEnd();
	  }
	  if (this.password !== null && this.password !== undefined) {
	    output.writeFieldBegin('password', Thrift.Type.STRING, 2);
	    output.writeString(this.password);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};
	
	Waverbase_authenticate_result = function(args) {
	  this.success = null;
	  this.e = null;
	  if (args instanceof ttypes.NotAuthorisedException) {
	    this.e = args;
	    return;
	  }
	  if (args) {
	    if (args.success !== undefined) {
	      this.success = args.success;
	    }
	    if (args.e !== undefined) {
	      this.e = args.e;
	    }
	  }
	};
	Waverbase_authenticate_result.prototype = {};
	Waverbase_authenticate_result.prototype.read = function(input) {
	  input.readStructBegin();
	  while (true)
	  {
	    var ret = input.readFieldBegin();
	    var fname = ret.fname;
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid)
	    {
	      case 0:
	      if (ftype == Thrift.Type.STRUCT) {
	        this.success = new ttypes.User();
	        this.success.read(input);
	      } else {
	        input.skip(ftype);
	      }
	      break;
	      case 1:
	      if (ftype == Thrift.Type.STRUCT) {
	        this.e = new ttypes.NotAuthorisedException();
	        this.e.read(input);
	      } else {
	        input.skip(ftype);
	      }
	      break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};
	
	Waverbase_authenticate_result.prototype.write = function(output) {
	  output.writeStructBegin('Waverbase_authenticate_result');
	  if (this.success !== null && this.success !== undefined) {
	    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
	    this.success.write(output);
	    output.writeFieldEnd();
	  }
	  if (this.e !== null && this.e !== undefined) {
	    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
	    this.e.write(output);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};
	
	WaverbaseClient = exports.Client = function(output, pClass) {
	    this.output = output;
	    this.pClass = pClass;
	    this.seqid = 0;
	    this._reqs = {};
	};
	WaverbaseClient.prototype = {};
	WaverbaseClient.prototype.signUp = function(username, password, callback) {
	  this.seqid += 1;
	  this._reqs[this.seqid] = callback;
	  this.send_signUp(username, password);
	};
	
	WaverbaseClient.prototype.send_signUp = function(username, password) {
	  var output = new this.pClass(this.output);
	  output.writeMessageBegin('signUp', Thrift.MessageType.CALL, this.seqid);
	  var args = new Waverbase_signUp_args();
	  args.username = username;
	  args.password = password;
	  args.write(output);
	  output.writeMessageEnd();
	  return this.output.flush();
	};
	
	WaverbaseClient.prototype.recv_signUp = function(input,mtype,rseqid) {
	  var callback = this._reqs[rseqid] || function() {};
	  delete this._reqs[rseqid];
	  if (mtype == Thrift.MessageType.EXCEPTION) {
	    var x = new Thrift.TApplicationException();
	    x.read(input);
	    input.readMessageEnd();
	    return callback(x);
	  }
	  var result = new Waverbase_signUp_result();
	  result.read(input);
	  input.readMessageEnd();
	
	  if (null !== result.success) {
	    return callback(null, result.success);
	  }
	  return callback('signUp failed: unknown result');
	};
	WaverbaseClient.prototype.authenticate = function(username, password, callback) {
	  this.seqid += 1;
	  this._reqs[this.seqid] = callback;
	  this.send_authenticate(username, password);
	};
	
	WaverbaseClient.prototype.send_authenticate = function(username, password) {
	  var output = new this.pClass(this.output);
	  output.writeMessageBegin('authenticate', Thrift.MessageType.CALL, this.seqid);
	  var args = new Waverbase_authenticate_args();
	  args.username = username;
	  args.password = password;
	  args.write(output);
	  output.writeMessageEnd();
	  return this.output.flush();
	};
	
	WaverbaseClient.prototype.recv_authenticate = function(input,mtype,rseqid) {
	  var callback = this._reqs[rseqid] || function() {};
	  delete this._reqs[rseqid];
	  if (mtype == Thrift.MessageType.EXCEPTION) {
	    var x = new Thrift.TApplicationException();
	    x.read(input);
	    input.readMessageEnd();
	    return callback(x);
	  }
	  var result = new Waverbase_authenticate_result();
	  result.read(input);
	  input.readMessageEnd();
	
	  if (null !== result.e) {
	    return callback(result.e);
	  }
	  if (null !== result.success) {
	    return callback(null, result.success);
	  }
	  return callback('authenticate failed: unknown result');
	};
	WaverbaseProcessor = exports.Processor = function(handler) {
	  this._handler = handler
	}
	WaverbaseProcessor.prototype.process = function(input, output) {
	  var r = input.readMessageBegin();
	  if (this['process_' + r.fname]) {
	    return this['process_' + r.fname].call(this, r.rseqid, input, output);
	  } else {
	    input.skip(Thrift.Type.STRUCT);
	    input.readMessageEnd();
	    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
	    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid);
	    x.write(output);
	    output.writeMessageEnd();
	    output.flush();
	  }
	}
	
	WaverbaseProcessor.prototype.process_signUp = function(seqid, input, output) {
	  var args = new Waverbase_signUp_args();
	  args.read(input);
	  input.readMessageEnd();
	  this._handler.signUp(args.username, args.password, function (err, result) {
	    var result = new Waverbase_signUp_result((err != null ? err : {success: result}));
	    output.writeMessageBegin("signUp", Thrift.MessageType.REPLY, seqid);
	    result.write(output);
	    output.writeMessageEnd();
	    output.flush();
	  })
	}
	
	WaverbaseProcessor.prototype.process_authenticate = function(seqid, input, output) {
	  var args = new Waverbase_authenticate_args();
	  args.read(input);
	  input.readMessageEnd();
	  this._handler.authenticate(args.username, args.password, function (err, result) {
	    var result = new Waverbase_authenticate_result((err != null ? err : {success: result}));
	    output.writeMessageBegin("authenticate", Thrift.MessageType.REPLY, seqid);
	    result.write(output);
	    output.writeMessageEnd();
	    output.flush();
	  })
	}
	


/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	//
	// Autogenerated by Thrift Compiler (0.9.1)
	//
	// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
	//
	var Thrift = __webpack_require__(1).Thrift;
	
	var ttypes = module.exports = {};
	User = module.exports.User = function(args) {
	  this.username = null;
	  if (args) {
	    if (args.username !== undefined) {
	      this.username = args.username;
	    }
	  }
	};
	User.prototype = {};
	User.prototype.read = function(input) {
	  input.readStructBegin();
	  while (true)
	  {
	    var ret = input.readFieldBegin();
	    var fname = ret.fname;
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid)
	    {
	      case 1:
	      if (ftype == Thrift.Type.STRING) {
	        this.username = input.readString();
	      } else {
	        input.skip(ftype);
	      }
	      break;
	      case 0:
	        input.skip(ftype);
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};
	
	User.prototype.write = function(output) {
	  output.writeStructBegin('User');
	  if (this.username !== null && this.username !== undefined) {
	    output.writeFieldBegin('username', Thrift.Type.STRING, 1);
	    output.writeString(this.username);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};
	
	NotAuthorisedException = module.exports.NotAuthorisedException = function(args) {
	  Thrift.TException.call(this, "NotAuthorisedException")
	  this.name = "NotAuthorisedException"
	  this.errorMessage = null;
	  if (args) {
	    if (args.errorMessage !== undefined) {
	      this.errorMessage = args.errorMessage;
	    }
	  }
	};
	Thrift.inherits(NotAuthorisedException, Thrift.TException);
	NotAuthorisedException.prototype.name = 'NotAuthorisedException';
	NotAuthorisedException.prototype.read = function(input) {
	  input.readStructBegin();
	  while (true)
	  {
	    var ret = input.readFieldBegin();
	    var fname = ret.fname;
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid)
	    {
	      case 1:
	      if (ftype == Thrift.Type.STRING) {
	        this.errorMessage = input.readString();
	      } else {
	        input.skip(ftype);
	      }
	      break;
	      case 0:
	        input.skip(ftype);
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};
	
	NotAuthorisedException.prototype.write = function(output) {
	  output.writeStructBegin('NotAuthorisedException');
	  if (this.errorMessage !== null && this.errorMessage !== undefined) {
	    output.writeFieldBegin('errorMessage', Thrift.Type.STRING, 1);
	    output.writeString(this.errorMessage);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};
	
	NotAuthenticatedException = module.exports.NotAuthenticatedException = function(args) {
	  Thrift.TException.call(this, "NotAuthenticatedException")
	  this.name = "NotAuthenticatedException"
	  this.errorMessage = null;
	  if (args) {
	    if (args.errorMessage !== undefined) {
	      this.errorMessage = args.errorMessage;
	    }
	  }
	};
	Thrift.inherits(NotAuthenticatedException, Thrift.TException);
	NotAuthenticatedException.prototype.name = 'NotAuthenticatedException';
	NotAuthenticatedException.prototype.read = function(input) {
	  input.readStructBegin();
	  while (true)
	  {
	    var ret = input.readFieldBegin();
	    var fname = ret.fname;
	    var ftype = ret.ftype;
	    var fid = ret.fid;
	    if (ftype == Thrift.Type.STOP) {
	      break;
	    }
	    switch (fid)
	    {
	      case 1:
	      if (ftype == Thrift.Type.STRING) {
	        this.errorMessage = input.readString();
	      } else {
	        input.skip(ftype);
	      }
	      break;
	      case 0:
	        input.skip(ftype);
	        break;
	      default:
	        input.skip(ftype);
	    }
	    input.readFieldEnd();
	  }
	  input.readStructEnd();
	  return;
	};
	
	NotAuthenticatedException.prototype.write = function(output) {
	  output.writeStructBegin('NotAuthenticatedException');
	  if (this.errorMessage !== null && this.errorMessage !== undefined) {
	    output.writeFieldBegin('errorMessage', Thrift.Type.STRING, 1);
	    output.writeString(this.errorMessage);
	    output.writeFieldEnd();
	  }
	  output.writeFieldStop();
	  output.writeStructEnd();
	  return;
	};
	


/***/ },
/* 4 */
/***/ function(module, exports) {

	module.exports = require("winston");

/***/ }
/******/ ]);
//# sourceMappingURL=backend.js.map