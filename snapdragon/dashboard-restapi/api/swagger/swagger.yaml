swagger: "2.0"
info:
  version: "0.0.1"
  title: Dashboard RestAPI
# during dev, should point to your local machine
host: localhost:10010
# basePath prefixes all resource paths 
basePath: /
# 
schemes:
  # tip: remove http to make production-grade
  - http
  - https
# format of bodies a client can send (Content-Type)
consumes:
  - application/json
# format of the responses to the client (Accepts)
produces:
  - application/json
paths:
  /:
    x-swagger-router-controller: database
    get:
      description: List all databases in this Mongo instance.
      operationId: showDatabases
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/Databases"
  /{dbName}:
    x-swagger-router-controller: database
    get:
      description: List all collections in database.
      operationId: showCollections
      parameters:
        - name: dbName
          in: path
          type: string
          required: true
          description: The name of the database.
      responses:
        "200":
          description: Success
        "404":
          description: Database not found.
  /{dbName}/{collectionName}:
    x-swagger-router-controller: database
    post:
      description: Create a new collection in the {dbName} database.
      operationId: addCollection
      parameters:
        - name: dbName
          in: path
          type: string
          required: true
          description: Database name.
        - name: collectionName
          in: path
          type: string
          required: true
          description: Collection name.
        - name: collectionSchema
          in: body
          description: Schema for the new collection.
          schema:
            $ref: "#/definitions/CollectionSchema"
      responses:
        "201":
          description: Created
          schema:
            $ref: "#/definitions/ErrorResponse"
        "404":
          description: Database not found.
        "409":
          description: Collection already exists.
  /collections:
    x-swagger-router-controller: collections
    put:
      description: Change the schema of a collection
      operationId: changeCollection
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/ErrorResponse"
      
  /collections/{name}:
    x-swagger-router-controller: collections
    get:
      description: Get schema of a specific collection
      operationId: getCollection
      parameters:
        - name: name
          in: path
          description: Name of the collection
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/CollectionsSchemaResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      description: Insert a document into this collection.
      operationId: addDocument
      consumes:
        - application/json
      parameters:
        - name: name
          in: path
          description: Name of the collection
          required: true
          type: string
        - name: documents
          in: body
          description: A JSON array storing documents to be inserted into the specified collection
          schema:
            $ref: "#/definitions/Documents"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/AddCollectionResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    put:
      description: Change a specific document in a collection
      operationId: changeDocument
      parameters:
        - name: name
          in: path
          description: The name of the collection
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/ErrorResponse"
  /swagger:
    x-swagger-pipe: swagger_raw
# complex objects have schema definitions
definitions:
  Database:
    type: object
    required:
      - name
      - sizeOnDisk
      - empty
    properties:
      name:
        type: string
      sizeOnDisk:
        type: number
      empty:
        type: boolean
  Databases:
    required:
      - databases
      - totalSize
      - ok
    properties:
      databases:
        type: array
        items: 
          $ref: "#/definitions/Database"
      totalSize:
        type: number
      ok:
        type: boolean
  Document:
    type: object
  Documents:
    type: array
    items:
      $ref: "#/definitions/Document"
  CollectionSchema:
    properties:
      schema:
        type: object
        description: JSON object describing the schema of the new collection
  CollectionsSchemaResponse:
    required:
      - collectionSchema
      - size
    properties:
      collectionSchema: 
        type: object
        description: The schema of the collection
      size:
        type: number
        description: The number of documents in the collection
  AddCollectionResponse:
    required:
      - message
    properties:
      message:
        type: string
  ErrorResponse:
    required:
      - message
    properties:
      message:
        type: string
