swagger: "2.0"
info:
  version: "0.0.1"
  title: Dashboard RestAPI
# during dev, should point to your local machine
host: localhost:10010
# basePath prefixes all resource paths 
basePath: /
# 
schemes:
  # tip: remove http to make production-grade
  - http
  - https
# format of bodies a client can send (Content-Type)
consumes:
  - application/json
# format of the responses to the client (Accepts)
produces:
  - application/json
paths:
  /:
    x-swagger-router-controller: database
    get:
      description: List all databases in this Mongo instance.
      operationId: showDatabases
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/Databases"
  /{dbName}:
    x-swagger-router-controller: database
    get:
      description: List all collections in database.
      operationId: showCollections
      parameters:
        - name: dbName
          in: path
          type: string
          required: true
          description: The name of the database.
      responses:
        "200":
          description: Success
        "404":
          description: Database not found.
    post:
      description: Create a new Mongo database in this instance.
      operationId: addDatabase
      parameters:
        - name: dbName
          in: path
          type: string
          required: true
          description: The name of the database.
        - name: options
          in: body
          description: Options to pass to the new database.
          schema:
            $ref: "#/definitions/DatabaseOptions"
      responses:
        "201":
          description: Database created successfully.
        "409":
          description: Database already exists.
  /{dbName}/{collectionName}:
    x-swagger-router-controller: database
    get:
      description: Get colleciton meta data.
      operationId: getCollection
      parameters:
        - name: dbName
          in: path
          type: string
          required: true
          description: Database name.
        - name: collectionName
          in: path
          type: string
          required: true
          description: Collection name.
      responses:
        "200":
          description: Success
        "404":
          description: Database or Collection not found.
    post:
      description: Create a new collection in the {dbName} database.
      operationId: addCollection
      parameters:
        - name: dbName
          in: path
          type: string
          required: true
          description: Database name.
        - name: collectionName
          in: path
          type: string
          required: true
          description: Collection name.
        - name: collectionSchema
          in: body
          description: Schema for the new collection.
          schema:
            $ref: "#/definitions/CollectionSchema"
      responses:
        "201":
          description: Created
        "404":
          description: Database not found.
        "409":
          description: Collection already exists.
  /{dbName}/{collectionName}/find:
    x-swagger-router-controller: database
    get:
      description: Find a document in a given collection in a given database.
      operationId: findDocument
      parameters:
        - name: dbName
          in: path
          type: string
          required: true
          description: Database name.
        - name: collectionName
          in: path
          type: string
          required: true
          description: Collection name.
      responses:
        "200":
          description: Success
  /{dbName}/{collectionName}/insert:
    x-swagger-router-controller: database
    post:
      description: Insert a document in a given collection in a given database.
      operationId: insertDocument
      parameters:
        - name: dbName
          in: path
          type: string
          required: true
          description: Database name.
        - name: collectionName
          in: path
          type: string
          required: true
          description: Collection name.
        - name: document
          in: body
          description: JSON document to insert.
          schema:
            $ref: "#/definitions/Document"
      responses:
        "201":
          description: Inserted new document in collection.
  /{dbName}/{collectionName}/insertMany:
    x-swagger-router-controller: database
    post:
      description: Insert multiple documents in a given collection in a given database.
      operationId: insertManyDocuments
      parameters:
        - name: dbName
          in: path
          type: string
          required: true
          description: Database name.
        - name: collectionName
          in: path
          type: string
          required: true
          description: Collection name.
        - name: document
          in: body
          description: JSON document to insert.
          schema:
            $ref: "#/definitions/Documents"
      responses:
        "201":
          description: Inserted new document in collection.
  /swagger:
    x-swagger-pipe: swagger_raw
# complex objects have schema definitions
definitions:
  Database:
    type: object
    required:
      - name
      - sizeOnDisk
      - empty
    properties:
      name:
        type: string
      sizeOnDisk:
        type: number
      empty:
        type: boolean
  Databases:
    required:
      - databases
      - totalSize
      - ok
    properties:
      databases:
        type: array
        items: 
          $ref: "#/definitions/Database"
      totalSize:
        type: number
      ok:
        type: boolean
  Document:
    type: object
  Documents:
    type: array
    items:
      $ref: "#/definitions/Document"
  CollectionSchema:
    properties:
      schema:
        type: object
        description: JSON object describing the schema of the new collection.
  DatabaseOptions:
    type: object
